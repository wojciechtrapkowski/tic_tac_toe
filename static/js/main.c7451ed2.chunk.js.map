{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Square","_ref","value","onSquareClick","React","createElement","className","onClick","Board","_ref2","xIsNext","squares","onPlay","handleClick","i","calculateWinner","nextSquares","slice","status","winner","Fragment","Array","fill","map","_","row","key","col","index","includes","Game","_useState","useState","_useState2","_slicedToArray","history","setHistory","_useState3","_useState4","currentMove","setCurrentMove","currentSquares","moves","move","description","nextHistory","concat","_toConsumableArray","length","emptyGame","lines","_lines$i","a","b","c","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","App"],"mappings":"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","file":"static/js/main.c7451ed2.chunk.js","sourcesContent":["import { useState } from 'react';\nimport './App.css';\nimport React, { Component }  from 'react';\n\nfunction Square({value, onSquareClick}) {\n  return <button className=\"square\" onClick={onSquareClick}>{value}</button>;\n}\n\nfunction Board({xIsNext, squares, onPlay}) {\n  function handleClick(i) {\n    // If squares[i] is not empty\n    if(squares[i] || calculateWinner(squares)) {\n      return;\n    }\n\n    const nextSquares = squares.slice();\n    if(xIsNext) {\n      nextSquares[i] = 'X';\n    } else {\n      nextSquares[i] = 'O';\n    }\n    onPlay(nextSquares);\n  }\n\n  const winner = calculateWinner(squares);\n  let status;\n\n  if(winner) {\n    status = \"Winner: \" + squares[winner[0]];\n  } else {\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\n  }\n\n  return (\n  <>\n      <div className=\"status\">\n        Game status: {status}\n      </div>\n      {Array(3).fill(null).map((_, row) => (\n        <div key={row} className=\"board-row\">\n          {Array(3).fill(null).map((_, col) => {\n            const index = row * 3 + col;\n            if(winner != null && winner.includes(index)) {\n              return (\n                      <div className=\"winner-tile\"> \n                        <Square key={index} value={squares[index]} onSquareClick={() => handleClick(index)} />\n                      </div> \n              );\n            } else {\n              return (\n                <Square key={index} value={squares[index]} onSquareClick={() => handleClick(index)} />\n              );\n            }\n          })}\n        </div>\n      ))}\n  </>\n    );\n}\n\nexport default function Game() {\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const currentSquares = history[currentMove];\n  const xIsNext = currentMove % 2 === 0;\n\n  function resetGame() {\n    const emptyGame = [Array(9).fill(null)];\n    setHistory(emptyGame);\n    setCurrentMove(0);\n  }\n\n  function handlePlay(nextSquares) {\n    const nextHistory = [...history.slice(0, currentMove+ 1 ), nextSquares];\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length-1);\n  }\n\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n  }\n\n  const moves = history.map( (squares, move) => {\n    let description;\n    \n    if (move>0) {\n      description = \"Go to move #\" + move;\n    } else {\n      description = \"Go to game start\";\n    }\n    \n    return (\n      <li key={move}>\n        <button onClick={() => jumpTo(move)}>{description}</button>\n      </li>\n    )\n  });\n\n\n  return (\n    <div className=\"game\">\n        <div className=\"board\">\n          <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay}/>\n        </div>\n        <button className=\"reset-button\" onClick={resetGame}>Reset</button>\n        <div className=\"game-info\">\n          <ol>{moves}</ol>\n        </div>\n    </div>\n  );\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return [a, b, c];\n    }\n  }\n  return null;\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}